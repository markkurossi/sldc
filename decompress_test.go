//
// decompress_test.go
//
// Copyright (c) 2018 Markku Rossi
//
// All rights reserved.
//
// Streaming Lossless Data Compression Algorithm - (SLDC)
// Standard ECMA-321 June 2001

package sldc

import (
	"encoding/hex"
	"fmt"
	"testing"
)

type inputTest struct {
	bits int
	val  uint32
}

var inputTests = []inputTest{
	inputTest{
		bits: 1,
		val:  0x01,
	},
	inputTest{
		bits: 2,
		val:  0x03,
	},
	inputTest{
		bits: 1,
		val:  0x01,
	},
	inputTest{
		bits: 4,
		val:  0x0f,
	},
	// 4
	inputTest{
		bits: 4,
		val:  0x0a,
	},
	inputTest{
		bits: 8,
		val:  0xbf,
	},
	// 6, 2.5 bytes consumed
	inputTest{
		bits: 16,
		val:  0xdfc3,
	},
	// 7, 4.5 bytes consumed
	inputTest{
		bits: 31,
		val:  0x6000e600,
	},
	// 8, 4.5 bytes consumed
	inputTest{
		bits: 1,
		val:  0x0,
	},
}

func TestInput(t *testing.T) {
	input := NewInput(compressedData)
	for i, test := range inputTests {
		val, err := input.Get(test.bits)
		if err != nil {
			t.Errorf("%d: Get failed: %s\n", i, err)
			continue
		}
		if val != test.val {
			t.Errorf("%d: 0x%02x vs 0x%02x\n", i, val, test.val)
		}
	}
}

func TestDecompress(t *testing.T) {
	bytes, err := Decompress(compressedData[:len(compressedData)-4])
	if err != nil {
		t.Fatalf("Decompress failed: %s\n", err)
	}
	fmt.Printf("=> %d\n", len(bytes))
	if true {
		fmt.Printf("=>\n%s", hex.Dump(bytes))
	}
}

var compressedData = []byte{
	0xff, 0xab, 0xfd, 0xfc, 0x3c, 0x00, 0x1c, 0xc0,
	0x03, 0xa0, 0x01, 0x14, 0x00, 0x6e, 0x00, 0x1d,
	0x80, 0x06, 0x50, 0x01, 0xb0, 0x00, 0x6f, 0x00,
	0x1c, 0x28, 0x1a, 0x20, 0x00, 0x1e, 0x00, 0x06,
	0xda, 0x07, 0x9b, 0xb2, 0x01, 0x9c, 0xc0, 0x03,
	0xd0, 0x00, 0x88, 0x00, 0x68, 0x00, 0x1d, 0x00,
	0x07, 0x4a, 0x09, 0x8e, 0x80, 0x02, 0xf0, 0x00,
	0xbc, 0x00, 0x77, 0x00, 0x1d, 0xe8, 0x72, 0x2e,
	0xa1, 0xe8, 0xce, 0x87, 0xe6, 0xf0, 0x01, 0xc8,
	0x00, 0x67, 0xa1, 0xb8, 0xc8, 0x00, 0x30, 0x00,
	0x0c, 0x28, 0x86, 0x2f, 0xa2, 0x98, 0xd6, 0x8a,
	0xe7, 0x3a, 0x23, 0x98, 0x68, 0x62, 0x2d, 0xa0,
	0xaf, 0x60, 0x28, 0x45, 0xdc, 0x17, 0x30, 0xf8,
	0xc2, 0x73, 0x98, 0x00, 0xc7, 0x48, 0xf3, 0x2d,
	0x1f, 0xcc, 0x34, 0x9d, 0x17, 0x6c, 0x7d, 0xe0,
	0x30, 0x72, 0x11, 0x8e, 0xf4, 0xb3, 0xe0, 0x27,
	0x0d, 0x32, 0x2b, 0x8e, 0x29, 0xa6, 0x61, 0x00,
	0x19, 0x00, 0x06, 0x4a, 0x5f, 0x99, 0x69, 0x8e,
	0x73, 0x00, 0x1a, 0x69, 0x06, 0x67, 0xf0, 0x8f,
	0x26, 0x5f, 0x98, 0x91, 0x66, 0x5c, 0x8d, 0xa6,
	0xea, 0x84, 0xf9, 0x8e, 0xa3, 0xbf, 0xc0, 0xd0,
	0x13, 0x25, 0x63, 0x4e, 0x80, 0x03, 0x37, 0x54,
	0xc4, 0xc5, 0x96, 0x2f, 0x49, 0xd6, 0x18, 0xe3,
	0x75, 0x6b, 0xc6, 0x3d, 0x5a, 0xfc, 0x24, 0x47,
	0x3a, 0xca, 0xf8, 0x16, 0x23, 0x87, 0xc0, 0xd7,
	0x33, 0x6d, 0x56, 0xcc, 0x75, 0xa1, 0x37, 0xe5,
	0x29, 0x33, 0x57, 0xb4, 0x5d, 0x60, 0xb3, 0x7e,
	0xda, 0xdf, 0x86, 0x35, 0x43, 0xe0, 0x06, 0x80,
	0x22, 0x45, 0x89, 0xf0, 0x6e, 0x19, 0x6c, 0x1b,
	0x89, 0x48, 0xc3, 0x65, 0x72, 0xa5, 0x87, 0x47,
	0xdc, 0x5e, 0x9c, 0x4a, 0xd8, 0x7d, 0x06, 0x35,
	0x4b, 0x17, 0x62, 0x85, 0xaa, 0x0e, 0x28, 0xc1,
	0xd5, 0xa0, 0xc6, 0xa0, 0x01, 0xcd, 0x53, 0x46,
	0xdd, 0xe2, 0xb3, 0x98, 0x00, 0xeb, 0x62, 0x5c,
	0x3f, 0x07, 0x2b, 0x04, 0x9c, 0x32, 0xac, 0x9b,
	0xf2, 0xee, 0x8b, 0xe8, 0xaa, 0x36, 0x00, 0x10,
	0xa8, 0x0e, 0x42, 0xb6, 0x58, 0xe6, 0xd2, 0xa2,
	0xd0, 0x01, 0x04, 0x00, 0x46, 0xb6, 0x7e, 0x2d,
	0x81, 0xa5, 0xa5, 0xc7, 0x16, 0xdd, 0xc5, 0xb5,
	0x8b, 0x30, 0x69, 0x6e, 0xd1, 0xc6, 0x6d, 0x1d,
	0x0a, 0x43, 0x7b, 0x75, 0x8e, 0x73, 0x66, 0x91,
	0x73, 0x40, 0x8f, 0x2e, 0x23, 0xca, 0x6a, 0x1e,
	0x5a, 0x94, 0x74, 0x00, 0x26, 0xdc, 0x67, 0x0f,
	0xd6, 0x15, 0xc3, 0x28, 0x00, 0x92, 0x00, 0x22,
	0x77, 0x75, 0x4d, 0xbf, 0x39, 0x79, 0x71, 0xcc,
	0x72, 0xcb, 0x8d, 0x3b, 0x74, 0x75, 0xa3, 0x1d,
	0x6f, 0x72, 0x74, 0x00, 0x15, 0x6f, 0x5b, 0xa9,
	0x83, 0x1e, 0x16, 0x39, 0xa3, 0x26, 0x74, 0xb3,
	0x35, 0xf4, 0xf0, 0x94, 0x60, 0x78, 0x1f, 0x5f,
	0x5c, 0xc7, 0x9d, 0xac, 0xc3, 0x7c, 0xd3, 0x58,
	0x00, 0xd7, 0x7b, 0xfd, 0x6e, 0x98, 0x3a, 0x38,
	0x70, 0x18, 0xc5, 0xbc, 0xd9, 0x37, 0x09, 0x98,
	0xa5, 0x42, 0x33, 0x85, 0xf8, 0x4f, 0x3c, 0x71,
	0xdc, 0x05, 0xc4, 0x1e, 0xa6, 0xef, 0xc1, 0xbb,
	0x83, 0xa5, 0x1a, 0xce, 0xbb, 0xf9, 0x7e, 0x80,
	0x48, 0x0b, 0xf3, 0xfe, 0x9b, 0x29, 0xb7, 0x83,
	0x48, 0xdd, 0x9b, 0x04, 0xf3, 0x4a, 0x73, 0x7e,
	0x45, 0xde, 0x18, 0xb7, 0x61, 0x23, 0x02, 0x06,
	0x90, 0x8f, 0x40, 0x64, 0x63, 0xe3, 0x5e, 0xfc,
	0xc0, 0x56, 0x32, 0x56, 0x3c, 0xe9, 0x7d, 0xde,
	0x85, 0xa7, 0xc0, 0xa2, 0x61, 0x7e, 0xe5, 0x93,
	0x95, 0x66, 0xf0, 0xd6, 0x18, 0x6b, 0xaf, 0xc9,
	0x06, 0xe4, 0x9f, 0x61, 0x34, 0x3b, 0xec, 0x15,
	0x3c, 0x5c, 0x3c, 0xdc, 0x00, 0x3b, 0x57, 0x6c,
	0xd9, 0x5f, 0x13, 0x85, 0x82, 0x4a, 0x75, 0xef,
	0x3d, 0x58, 0x47, 0xe2, 0x4a, 0x40, 0xd6, 0xb7,
	0xfa, 0x31, 0x06, 0x19, 0x78, 0x7e, 0x04, 0xfd,
	0x70, 0x4d, 0x09, 0xbb, 0x45, 0x4c, 0x35, 0xa5,
	0xe0, 0x12, 0x1d, 0x6c, 0x8b, 0x8e, 0xc8, 0x75,
	0x4c, 0xf2, 0x1d, 0x32, 0x46, 0x76, 0x51, 0x1a,
	0x5b, 0xf4, 0x6b, 0x6f, 0x72, 0x35, 0xaa, 0xc8,
	0x7b, 0xb8, 0x46, 0x56, 0xb1, 0xc5, 0xec, 0x41,
	0xb8, 0x59, 0x0e, 0xe1, 0x38, 0xb0, 0x08, 0xd6,
	0xcf, 0x20, 0xee, 0xa7, 0x18, 0xd9, 0x5c, 0x63,
	0x70, 0x51, 0x9f, 0x17, 0x87, 0xc9, 0x44, 0x69,
	0xf8, 0x26, 0x59, 0xc4, 0xc7, 0x6f, 0xdc, 0x1d,
	0xdc, 0x33, 0xc1, 0xd5, 0xc8, 0x71, 0x1c, 0x19,
	0xf3, 0x1e, 0x99, 0x6e, 0x52, 0x2d, 0xb1, 0x49,
	0x4f, 0xe2, 0xbd, 0xa8, 0x82, 0xdd, 0xf8, 0xc2,
	0x30, 0xc0, 0x11, 0x32, 0xee, 0x98, 0x7e, 0x9b,
	0x87, 0x94, 0xf7, 0x7b, 0xe9, 0xf0, 0x24, 0xdf,
	0x47, 0xe2, 0x5d, 0x97, 0x4a, 0x68, 0x67, 0x6e,
	0xb2, 0x0d, 0x99, 0xc6, 0x77, 0x7b, 0xc5, 0xc0,
	0x2d, 0xb5, 0x28, 0xde, 0xda, 0xe3, 0x0c, 0xda,
	0x63, 0x4b, 0x66, 0x90, 0xa8, 0xb2, 0x39, 0xb5,
	0x99, 0x13, 0x23, 0x09, 0x06, 0xd8, 0xa3, 0x1b,
	0x6e, 0x8c, 0xe8, 0xa2, 0x33, 0xa2, 0x29, 0x1a,
	0xd8, 0x64, 0x5a, 0x3a, 0xe2, 0xee, 0xf3, 0x7d,
	0x9c, 0x3e, 0x82, 0x7e, 0x67, 0x33, 0x96, 0x77,
	0xde, 0x04, 0xc1, 0x13, 0xe3, 0xe0, 0x09, 0x16,
	0x8f, 0x23, 0x4a, 0x2b, 0x8e, 0x69, 0xfe, 0x44,
	0xc8, 0x9a, 0x31, 0xc8, 0x86, 0x36, 0xdd, 0xa7,
	0x81, 0xe3, 0x56, 0x50, 0xca, 0x8a, 0x62, 0xda,
	0x81, 0x90, 0x6a, 0x3a, 0x35, 0xa8, 0xd8, 0xe6,
	0xa5, 0xa3, 0x2a, 0x92, 0xe2, 0xdc, 0xd5, 0xd9,
	0xea, 0x29, 0xba, 0x7d, 0x07, 0x1c, 0xc8, 0xa6,
	0xeb, 0xc3, 0xe3, 0x02, 0xf8, 0xb0, 0x00, 0x31,
	0xea, 0x43, 0xf8, 0x17, 0x0e, 0x18, 0x47, 0x89,
	0x4e, 0x2a, 0x57, 0x94, 0xdb, 0x5d, 0xd3, 0x7d,
	0x70, 0xce, 0x95, 0xd1, 0x28, 0x57, 0xac, 0x6d,
	0x53, 0x91, 0x76, 0xe5, 0x32, 0x9f, 0x19, 0x67,
	0xe0, 0x4e, 0xd0, 0xf2, 0xc5, 0xa3, 0xac, 0xb9,
	0xb8, 0x71, 0xb1, 0x10, 0x19, 0xac, 0x8f, 0x88,
	0x6b, 0x87, 0x20, 0x6e, 0xcb, 0x02, 0x65, 0xcb,
	0x42, 0x68, 0xb2, 0x29, 0xd3, 0x2d, 0xc8, 0xbe,
	0xc1, 0xe7, 0x3a, 0xe4, 0x9a, 0x2c, 0xbe, 0x6d,
	0xb0, 0xe9, 0xce, 0xc0, 0x7a, 0x95, 0x0e, 0x76,
	0x2f, 0x30, 0xd9, 0xac, 0x5d, 0x68, 0xb3, 0x95,
	0xe7, 0xf1, 0x08, 0x1c, 0xed, 0x32, 0x32, 0xcc,
	0x0e, 0x34, 0xb4, 0xf8, 0xc2, 0xa3, 0xe2, 0xfb,
	0x3c, 0x9d, 0xb8, 0xc8, 0x38, 0xe7, 0xb0, 0xd8,
	0x0d, 0xea, 0x6f, 0x81, 0x78, 0x6b, 0x6c, 0x51,
	0x95, 0x4f, 0xf0, 0x96, 0x61, 0x36, 0xd2, 0x2c,
	0x36, 0xc8, 0xdf, 0x81, 0x43, 0x03, 0xf1, 0x1b,
	0x76, 0xa8, 0xe2, 0xb6, 0x64, 0x5b, 0x76, 0x8e,
	0x72, 0x93, 0x90, 0x6d, 0xea, 0x35, 0xcc, 0x1b,
	0xe8, 0x8e, 0xb8, 0x3a, 0x44, 0x1b, 0x3a, 0x9a,
	0xc0, 0x05, 0x2e, 0x2d, 0xfe, 0x19, 0x83, 0x2d,
	0xc5, 0xf5, 0xf3, 0x62, 0x72, 0x1d, 0x00, 0x09,
	0x17, 0x45, 0x30, 0xed, 0x91, 0xc6, 0x99, 0x8d,
	0x48, 0x85, 0x69, 0x33, 0x20, 0x00, 0xf3, 0xc7,
	0x29, 0x22, 0xf1, 0xac, 0xce, 0x7b, 0xd2, 0xfc,
	0xdb, 0xb7, 0x83, 0x66, 0xd7, 0x40, 0x45, 0xbc,
	0xae, 0x39, 0x23, 0x65, 0xe9, 0xf1, 0x0c, 0x0f,
	0x80, 0x1f, 0xf4, 0x00, 0xca, 0x0b, 0x00, 0x00,
}
